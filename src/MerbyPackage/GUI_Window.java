package MerbyPackage;

import static MerbyPackage.Output.distributeLog;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.io.InputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.Timer;
import javax.swing.filechooser.*;
import javax.swing.text.*;

/*  Title   : Mirth-Derby (Merby) Database Administrator
    Created : 3/1/2018 9:30 PM
    Purpose : Provides Tools for Data Recovery from Mirth's Derby Database
*/

public class GUI_Window extends javax.swing.JFrame implements ActionListener
{
    private static String defaultPath = "C:\\";
    private static StyledDocument doc;//Styled doc for text pane
    private static Style style;//Style for text pane
    private static final Color SUCCESS = new Color(0,128,64);//Green for text pane
    private static final Color PROCESS = new Color(0,170,200);//Blue for text pane
    private static final Color ERROR_MESSAGE = new Color(255,0,0);//Red for text pane
    private static final Color DATE = new Color(169,169,169);//Gray for text pane
    private ImageIcon merb = null;
    private JScrollBar verticalScroll;
    private final Timer timer;
    
    public static void main(String args[]) 
    {
        Output.startLog();
        //Launch GUI
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new GUI_Window().setVisible(true);
            }
        });
    }

    private GUI_Window()
    {        
        initComponents();
        timer = new Timer(300000, this);
        timer.setInitialDelay(300000);
        //Generate StyledDocument and create style for textpaneOutput
        doc = textpaneOutput.getStyledDocument();
        style = textpaneOutput.addStyle("mystyle", null);
        Output.outputProgramStatus();
        Output.displayErrors(labelVersion);
    }
    
    private ImageIcon getMerbyIcon()
    {
        try 
        {
            if (merb == null)
            {
                merb = new javax.swing.ImageIcon(getClass().getResource("/MerbyPackage/MerbyIcon.png"));
            }
        }  
        catch (Exception e) 
        {
            distributeLog(e.toString() + "\n", 'B');
        }
        
        return merb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelMain = new javax.swing.JPanel();
        labelImage = new javax.swing.JLabel();
        labelVersion = new javax.swing.JLabel();
        buttonExport = new javax.swing.JButton();
        buttonImportTables = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textpaneOutput = new javax.swing.JTextPane();
        verticalScroll = jScrollPane1.getVerticalScrollBar();
        buttonExit = new javax.swing.JButton();
        buttonRecoverCorruptDB = new javax.swing.JButton();
        buttonGetUserName = new javax.swing.JButton();
        buttonSelectMirthDBFolder = new javax.swing.JButton();
        buttonChangeDefaultExport = new javax.swing.JButton();
        buttonExportQuestion = new javax.swing.JButton();
        buttonImportQuestion = new javax.swing.JButton();
        buttonCorruptQuestion = new javax.swing.JButton();
        buttonResetPassword = new javax.swing.JButton();
        buttonAbout = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        labelPassword = new javax.swing.JLabel();
        labelMerbQuote = new javax.swing.JLabel();
        labelHeaderTitle = new javax.swing.JLabel();
        labelVersion1 = new javax.swing.JLabel();
        buttonCompressDB = new javax.swing.JButton();
        buttonCompressQuestion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Merby - " + MerbyPackage.ClassManager.getTodaysDate(0));
        setBackground(new java.awt.Color(0, 61, 122));
        setIconImage(getMerbyIcon().getImage());
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1063, 2147483647));
        setMinimumSize(new java.awt.Dimension(1063, 545));

        panelMain.setBackground(new java.awt.Color(0, 51, 102));
        panelMain.setMinimumSize(new java.awt.Dimension(1037, 504));

        labelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MerbyPackage/Merb.png"))); // NOI18N
        labelImage.setMaximumSize(new java.awt.Dimension(108, 623));

        labelVersion.setFont(new java.awt.Font("Courier New", 0, 8)); // NOI18N
        labelVersion.setForeground(new java.awt.Color(255, 255, 255));
        labelVersion.setText("v2.5.3118");

        buttonExport.setBackground(new java.awt.Color(255, 255, 255));
        buttonExport.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonExport.setText("Export Backup Files");
        buttonExport.setEnabled(false);
        buttonExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonExport.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonExport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonExportActionPerformed(evt);
            }
        });

        buttonImportTables.setBackground(new java.awt.Color(255, 255, 255));
        buttonImportTables.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonImportTables.setText("Import Merby Backup");
        buttonImportTables.setEnabled(false);
        buttonImportTables.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonImportTables.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonImportTables.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonImportTablesActionPerformed(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(797, 32767));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(797, 417));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(797, 417));

        textpaneOutput.setEditable(false);
        textpaneOutput.setBackground(new java.awt.Color(254, 249, 205));
        textpaneOutput.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        textpaneOutput.setDoubleBuffered(true);
        textpaneOutput.setMaximumSize(new java.awt.Dimension(779, 2147483647));
        textpaneOutput.setMinimumSize(new java.awt.Dimension(779, 414));
        textpaneOutput.setPreferredSize(new java.awt.Dimension(779, 414));
        textpaneOutput.addCaretListener(new javax.swing.event.CaretListener()
        {
            public void caretUpdate(javax.swing.event.CaretEvent evt)
            {
                textpaneOutputCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(textpaneOutput);

        buttonExit.setBackground(new java.awt.Color(255, 255, 255));
        buttonExit.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonExit.setText("Exit");
        buttonExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonExit.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonExitActionPerformed(evt);
            }
        });

        buttonRecoverCorruptDB.setBackground(new java.awt.Color(255, 255, 255));
        buttonRecoverCorruptDB.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonRecoverCorruptDB.setText("Repair Corrupt DB");
        buttonRecoverCorruptDB.setEnabled(false);
        buttonRecoverCorruptDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonRecoverCorruptDB.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonRecoverCorruptDB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonRecoverCorruptDBActionPerformed(evt);
            }
        });

        buttonGetUserName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGetUserName.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonGetUserName.setText("View UN");
        buttonGetUserName.setEnabled(false);
        buttonGetUserName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonGetUserName.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonGetUserName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonGetUserNameActionPerformed(evt);
            }
        });

        buttonSelectMirthDBFolder.setBackground(new java.awt.Color(255, 255, 255));
        buttonSelectMirthDBFolder.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonSelectMirthDBFolder.setText("Choose Mirth Directory");
        buttonSelectMirthDBFolder.setEnabled(false);
        buttonSelectMirthDBFolder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSelectMirthDBFolder.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonSelectMirthDBFolder.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonSelectMirthDBFolderActionPerformed(evt);
            }
        });

        buttonChangeDefaultExport.setBackground(new java.awt.Color(255, 255, 255));
        buttonChangeDefaultExport.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonChangeDefaultExport.setText("Change Backup Path");
        buttonChangeDefaultExport.setEnabled(false);
        buttonChangeDefaultExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonChangeDefaultExport.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonChangeDefaultExport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonChangeDefaultExportActionPerformed(evt);
            }
        });

        buttonExportQuestion.setBackground(new java.awt.Color(255, 255, 255));
        buttonExportQuestion.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonExportQuestion.setText("?");
        buttonExportQuestion.setEnabled(false);
        buttonExportQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonExportQuestion.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonExportQuestionActionPerformed(evt);
            }
        });

        buttonImportQuestion.setBackground(new java.awt.Color(255, 255, 255));
        buttonImportQuestion.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonImportQuestion.setText("?");
        buttonImportQuestion.setEnabled(false);
        buttonImportQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonImportQuestion.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonImportQuestionActionPerformed(evt);
            }
        });

        buttonCorruptQuestion.setBackground(new java.awt.Color(255, 255, 255));
        buttonCorruptQuestion.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonCorruptQuestion.setText("?");
        buttonCorruptQuestion.setEnabled(false);
        buttonCorruptQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCorruptQuestion.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonCorruptQuestionActionPerformed(evt);
            }
        });

        buttonResetPassword.setBackground(new java.awt.Color(255, 255, 255));
        buttonResetPassword.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonResetPassword.setText("Reset UN/PW");
        buttonResetPassword.setEnabled(false);
        buttonResetPassword.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonResetPassword.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonResetPassword.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonResetPasswordActionPerformed(evt);
            }
        });

        buttonAbout.setBackground(new java.awt.Color(255, 255, 255));
        buttonAbout.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonAbout.setText("About");
        buttonAbout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAbout.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonAboutActionPerformed(evt);
            }
        });

        jPasswordField1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jPasswordField1MouseClicked(evt);
            }
        });
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                jPasswordField1KeyTyped(evt);
            }
        });

        labelPassword.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        labelPassword.setForeground(new java.awt.Color(255, 255, 255));
        labelPassword.setText("Password:");

        labelMerbQuote.setFont(new java.awt.Font("Franklin Gothic Book", 0, 16)); // NOI18N
        labelMerbQuote.setForeground(new java.awt.Color(255, 255, 255));
        labelMerbQuote.setText("Hi! I'm Merb!");
        labelMerbQuote.setToolTipText("");

        labelHeaderTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MerbyPackage/Merby.png"))); // NOI18N

        labelVersion1.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        labelVersion1.setForeground(new java.awt.Color(169, 169, 169));
        labelVersion1.setText("Min:Sec.Msec");

        buttonCompressDB.setBackground(new java.awt.Color(255, 255, 255));
        buttonCompressDB.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonCompressDB.setText("Compress DB");
        buttonCompressDB.setEnabled(false);
        buttonCompressDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCompressDB.setMargin(new java.awt.Insets(2, 0, 2, 0));
        buttonCompressDB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonCompressDBActionPerformed(evt);
            }
        });

        buttonCompressQuestion.setBackground(new java.awt.Color(255, 255, 255));
        buttonCompressQuestion.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        buttonCompressQuestion.setText("?");
        buttonCompressQuestion.setEnabled(false);
        buttonCompressQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCompressQuestion.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonCompressQuestionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonChangeDefaultExport, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSelectMirthDBFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(buttonGetUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonResetPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMerbQuote))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonCompressDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonRecoverCorruptDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonImportTables, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonExportQuestion)
                            .addComponent(buttonImportQuestion)
                            .addComponent(buttonCorruptQuestion)
                            .addComponent(buttonCompressQuestion))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(labelVersion1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelHeaderTitle)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(labelPassword))
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelVersion)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(buttonAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(buttonAbout)
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelPassword))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelHeaderTitle, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelVersion1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(labelMerbQuote))
                            .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonExport)
                            .addComponent(buttonExportQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonImportTables)
                            .addComponent(buttonImportQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonRecoverCorruptDB)
                            .addComponent(buttonCorruptQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCompressDB)
                            .addComponent(buttonCompressQuestion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonGetUserName)
                            .addComponent(buttonResetPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSelectMirthDBFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonChangeDefaultExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonExit)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField1KeyTyped
        if(ClassManager.getPasswordStatus(evt.getKeyChar(), jPasswordField1.getPassword()))
        {
            toggleButtons(true);
            //Removes password after successfull entry.
            jPasswordField1.setText("");
            timer.start();
        }      
    }//GEN-LAST:event_jPasswordField1KeyTyped

    private void buttonAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAboutActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Mirth-Derby (Merby) Database Administrator " + labelVersion.getText() + ". Rescuing Mirth data, one Merb at a time.\n" +
            "Created and maintained by Nickdom1. Art contributed by my wife Lydia.\n" +
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" +
            "Supported Platforms using 32/64 bit architecture:\n" +
            "Supported Operating Systems: Windows XP SP3 and above\n" +
            "Supported Java Platforms: JRE version 7 and above\n" +
            "Supported Mirth Data: Mirth version 2.0.0.5127.b361 to 3.5.1.b194\n" +
            "This product utilizes the Apache Derby 10.12.1.1 driver developed by the Apache Software Foundation (http://www.apache.org/).\n" +
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "Merb says...", JOptionPane.INFORMATION_MESSAGE, getMerbyIcon());
        timer.restart();
    }//GEN-LAST:event_buttonAboutActionPerformed

    private void buttonResetPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetPasswordActionPerformed
        Object[] options = {"YES - RESET USERNAME/PASSWORD", "No - keep username/password"};
        int reset = JOptionPane.showOptionDialog(labelVersion,
        "WARNING!!! YOU ARE ABOUT TO RESET THE MIRTH ADMIN USERNAME/PASSWORD TO 'ADMIN'!!!\nDo you wish to continue?",
        "RESET MIRTH USERNAME/PASSWORD",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);
        
        if(reset == 0)
        {
            ClassManager.resetPassword(labelVersion);
        }
        
        timer.restart();
    }//GEN-LAST:event_buttonResetPasswordActionPerformed

    private void buttonCorruptQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCorruptQuestionActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Attempts to repair a Corrupt Database. Use this only if an Export fails!\n\n" +
                "* Merby will normally require Administrative privileges to complete the repair - run Batch file 'StartMerbyAsAdmin.bat' as an Admin.\n" +
                "* After running the repair successfully, immediately select button \"Export Backup Files\" to make a new backup.", "Merb says...", JOptionPane.QUESTION_MESSAGE);
        timer.restart();
    }//GEN-LAST:event_buttonCorruptQuestionActionPerformed

    private void buttonImportQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportQuestionActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Imports Merby backups. Backups must be valid .merby files matching version of Mirth installed.\n\n" +
                "* Merby backups are created from the 'Export Backup Files' button in Merby. Make backups before reinstalling Mirth!\n" +
                "* After reinstalling Mirth, you CANNOT import backups until you login to Mirth as admin and then stop the Mirth service.\n" +
                "* Default Backup path is normally: 'C:\\MerbyBackups\\MirthConfigurations\\[DATE]\\MerbyTableBackup'.\n" +
                "* There is normally a Merby backup for the Channel, Code Template, and Code Template Library tables. Import each backup.\n" +
                "* If you get read only errors on import, try running the companion file 'StartMerbyAsAdmin' as an Administrator and try again.", "Merb says...", JOptionPane.QUESTION_MESSAGE);
        timer.restart();
    }//GEN-LAST:event_buttonImportQuestionActionPerformed

    private void buttonExportQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportQuestionActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Exports Channels, Code Templates, and Merby backups.\n" +
                "It is STRONGLY reccomended to use the full Merby backups for simplicity and effectiveness.\n\n" +
                "* Channels are exported as individual XML backup files.\n" +
                "* Code Templates are also exported this way. Code Template Libraries ARE NOT INCLUDED - see Merby Backups.\n" +
                "* Merby Backups include the entire Channel, Code Template, and Code Template Library tables.", "Merb says...", JOptionPane.QUESTION_MESSAGE);
        timer.restart();
    }//GEN-LAST:event_buttonExportQuestionActionPerformed

    private void buttonChangeDefaultExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeDefaultExportActionPerformed
        ClassManager.overideBackup(getOverideMerby("Select Backup Directory"));
        timer.restart();
    }//GEN-LAST:event_buttonChangeDefaultExportActionPerformed

    private void buttonSelectMirthDBFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectMirthDBFolderActionPerformed
        ClassManager.overideMirthDB(getOverideMerby("Select Mirth Directory"));
        timer.restart();
    }//GEN-LAST:event_buttonSelectMirthDBFolderActionPerformed

    private void buttonGetUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGetUserNameActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Username is: '" + ClassManager.getUserName(labelVersion)[0] +"'", "Merb says...", JOptionPane.INFORMATION_MESSAGE);
        timer.restart();
    }//GEN-LAST:event_buttonGetUserNameActionPerformed

    private void buttonRecoverCorruptDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRecoverCorruptDBActionPerformed
        InputStream logFolder = getClass().getResourceAsStream("/log/");
        ClassManager.repairDB(logFolder, labelVersion);
        timer.restart();
    }//GEN-LAST:event_buttonRecoverCorruptDBActionPerformed

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        distributeLog("Shutting Down Merby...\n", 'B');
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonImportTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportTablesActionPerformed
        ClassManager.startImport(getMerbyBackup(), labelVersion);
        timer.restart();
    }//GEN-LAST:event_buttonImportTablesActionPerformed

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed
        ClassManager.startExport(labelVersion);
        timer.restart();
    }//GEN-LAST:event_buttonExportActionPerformed

    private void buttonCompressDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompressDBActionPerformed
        Object[] options = {"YES - COMPRESS DB", "No - don't compress DB"};
        int compress = JOptionPane.showOptionDialog(labelVersion,
        "WARNING!!! YOU ARE ABOUT TO COMPRESS THE DERBY DATABASE!!!\nThis can take a long time for larger databases/older machines (do not interrupt a compression job).\nDo you wish to continue?",
        "COMPRESS DERBY DATABASE",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,     //do not use a custom Icon
        options,  //the titles of buttons
        options[1]);

        if(compress == 0)
        {
            ClassManager.compressDB(labelVersion);
        }
        
        timer.restart();
    }//GEN-LAST:event_buttonCompressDBActionPerformed

    private void buttonCompressQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCompressQuestionActionPerformed
        JOptionPane.showMessageDialog(labelVersion, "Compresses the Derby database by removing unused file space.\n" +
                "WARNING! THIS CAN POTENTIALLY DAMAGE THE DERBY DATABASE. MAKE A BACKUP BEFORE CHOOSING YES TO THIS OPTION.\n" +
                "This is an experimental option. During internal testing it shrunk a 30GB database to ~800MB in less than a minute.\n\n" +
                "* If you get read only errors, try running the companion file 'StartMerbyAsAdmin' as an Administrator and try again.", "Merb says...", JOptionPane.QUESTION_MESSAGE);
        timer.restart();
    }//GEN-LAST:event_buttonCompressQuestionActionPerformed
    //Caret Listening is necessary to determine if the screen needs to be updated.
    private void textpaneOutputCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textpaneOutputCaretUpdate
        //Validates the scroll panel before scrolling down.
        jScrollPane1.revalidate();
        //Scrolls to bottom of scroll panel.
        verticalScroll.setValue(verticalScroll.getMaximum());
        //Refreshes the screen.
        jScrollPane1.paintComponents(jScrollPane1.getGraphics());
    }//GEN-LAST:event_textpaneOutputCaretUpdate

    private void jPasswordField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPasswordField1MouseClicked
        if(!jPasswordField1.isEnabled())
        {
            toggleButtons(false);
            distributeLog("Locked Merby. Enter password again to unlock Merby.\n", 'B');
            ClassManager.resetLoginAttempts();
            timer.stop();
        }        
    }//GEN-LAST:event_jPasswordField1MouseClicked

    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt)
    {
        toggleButtons(false);
        distributeLog("Locked Merby after five idle minutes. Enter password again to unlock Merby.\n", 'B');
        ClassManager.resetLoginAttempts();
        timer.stop();
    }
    
    private void toggleButtons(boolean toggle)
    {
        buttonExport.setEnabled(toggle);
        buttonImportTables.setEnabled(toggle);
        buttonRecoverCorruptDB.setEnabled(toggle);
        buttonGetUserName.setEnabled(toggle);
        buttonSelectMirthDBFolder.setEnabled(toggle);
        buttonChangeDefaultExport.setEnabled(toggle);
        buttonResetPassword.setEnabled(toggle);
        buttonCompressDB.setEnabled(toggle);
        buttonCompressQuestion.setEnabled(toggle);
        buttonExportQuestion.setEnabled(toggle);
        buttonImportQuestion.setEnabled(toggle);
        buttonCorruptQuestion.setEnabled(toggle);
        buttonCompressQuestion.setEnabled(toggle);
        jPasswordField1.setEnabled(!toggle);
    }
    
    public String getOverideMerby(String Dialog)
    {
        String folderPath;
        JFileChooser changeFolder = new JFileChooser("C:\\");
        changeFolder.setDialogTitle(Dialog);
        changeFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        changeFolder.setAcceptAllFileFilterUsed(false);
        
        if (changeFolder.showOpenDialog(labelVersion) == JFileChooser.APPROVE_OPTION) 
        {
            folderPath = changeFolder.getSelectedFile().getAbsolutePath() + "\\";
        } 
        else 
        {
          folderPath = "";
        }
        
        return folderPath;
    }
    
    public String getMerbyBackup()
    {
        String filePath;
        final JFileChooser pickFileToImport = new JFileChooser(defaultPath);
        FileFilter merbyFileFilter = new FileNameExtensionFilter("Merby File","merby");
        pickFileToImport.setFileFilter(merbyFileFilter);

        if (pickFileToImport.showDialog(labelVersion, "Choose Merby Backup File") == JFileChooser.APPROVE_OPTION)
        {
            filePath = pickFileToImport.getSelectedFile().toString();
        }
        else
        {
            filePath = "";
        }
        
        if(filePath.length() > 0)
        {
            defaultPath = pickFileToImport.getSelectedFile().getAbsolutePath();
        }
        
        return filePath;
    }
    
    public static void output(String message, char colorState)
    {        
        try
        {
            switch (colorState) 
            {
                case 'C':
                    StyleConstants.setForeground(style, DATE);
                    break;
                case 'B':
                    StyleConstants.setForeground(style, PROCESS);
                    break;
                case 'G':
                    StyleConstants.setForeground(style, SUCCESS);
                    break;
                default:
                    StyleConstants.setForeground(style, ERROR_MESSAGE);
                    break;
            }
            
            doc.insertString(doc.getLength(), message, style);
            
            // Resets the Caret if it's not at the end of the document. Necessary for Caret Listener/auto-scroll.
            if(textpaneOutput.getCaretPosition() != doc.getLength())
            {
                textpaneOutput.setCaretPosition(doc.getLength());
            }
        }
        catch(BadLocationException e){}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAbout;
    private javax.swing.JButton buttonChangeDefaultExport;
    private javax.swing.JButton buttonCompressDB;
    private javax.swing.JButton buttonCompressQuestion;
    private javax.swing.JButton buttonCorruptQuestion;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonExport;
    private javax.swing.JButton buttonExportQuestion;
    private javax.swing.JButton buttonGetUserName;
    private javax.swing.JButton buttonImportQuestion;
    private javax.swing.JButton buttonImportTables;
    private javax.swing.JButton buttonRecoverCorruptDB;
    private javax.swing.JButton buttonResetPassword;
    private javax.swing.JButton buttonSelectMirthDBFolder;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHeaderTitle;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelMerbQuote;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelVersion;
    private javax.swing.JLabel labelVersion1;
    private javax.swing.JPanel panelMain;
    private static javax.swing.JTextPane textpaneOutput;
    // End of variables declaration//GEN-END:variables
}
